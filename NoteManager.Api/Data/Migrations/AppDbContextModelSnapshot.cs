// <auto-generated />

using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace NoteManager.Api.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    internal class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("NoteManager.Api.Models.File", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uuid");

                b.Property<string>("ContentType")
                    .HasColumnType("text");

                b.Property<DateTime>("CreationDate")
                    .HasColumnType("timestamp without time zone");

                b.Property<string>("Format")
                    .HasColumnType("text");

                b.Property<string>("Name")
                    .HasColumnType("text");

                b.Property<long>("Size")
                    .HasColumnType("bigint");

                b.Property<string>("UserId")
                    .HasColumnType("text");

                b.HasKey("Id");

                b.HasIndex("UserId");

                b.ToTable("Files");
            });

            modelBuilder.Entity("NoteManager.Api.Models.Note", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uuid");

                b.Property<string>("Body")
                    .HasColumnType("text");

                b.Property<string>("Title")
                    .HasColumnType("text");

                b.Property<string>("UserId")
                    .HasColumnType("text");

                b.HasKey("Id");

                b.HasIndex("UserId");

                b.ToTable("Notes");
            });

            modelBuilder.Entity("NoteManager.Api.Models.RefreshToken", b =>
            {
                b.Property<string>("Token")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("text");

                b.Property<DateTime>("CreationDate")
                    .HasColumnType("timestamp without time zone");

                b.Property<DateTime>("ExpiryDate")
                    .HasColumnType("timestamp without time zone");

                b.Property<bool>("Invalidated")
                    .HasColumnType("boolean");

                b.Property<string>("Jti")
                    .HasColumnType("text");

                b.Property<bool>("Used")
                    .HasColumnType("boolean");

                b.Property<string>("UserId")
                    .HasColumnType("text");

                b.HasKey("Token");

                b.HasIndex("UserId");

                b.ToTable("RefreshTokens");
            });

            modelBuilder.Entity("NoteManager.Api.Models.User", b =>
            {
                b.Property<string>("Id")
                    .HasColumnType("text");

                b.Property<int>("AccessFailedCount")
                    .HasColumnType("integer");

                b.Property<string>("Biography")
                    .HasColumnType("text");

                b.Property<string>("ConcurrencyStamp")
                    .HasColumnType("text");

                b.Property<DateTime>("CreatedDate")
                    .HasColumnType("timestamp without time zone");

                b.Property<string>("Email")
                    .HasColumnType("text");

                b.Property<bool>("EmailConfirmed")
                    .HasColumnType("boolean");

                b.Property<string>("FirstName")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<string>("LastName")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<bool>("LockoutEnabled")
                    .HasColumnType("boolean");

                b.Property<DateTimeOffset?>("LockoutEnd")
                    .HasColumnType("timestamp with time zone");

                b.Property<string>("NormalizedEmail")
                    .HasColumnType("text");

                b.Property<string>("NormalizedUserName")
                    .HasColumnType("text");

                b.Property<string>("PasswordHash")
                    .HasColumnType("text");

                b.Property<string>("PhoneNumber")
                    .HasColumnType("text");

                b.Property<bool>("PhoneNumberConfirmed")
                    .HasColumnType("boolean");

                b.Property<string>("SecurityStamp")
                    .HasColumnType("text");

                b.Property<bool>("TwoFactorEnabled")
                    .HasColumnType("boolean");

                b.Property<string>("UserName")
                    .HasColumnType("text");

                b.HasKey("Id");

                b.ToTable("Users");
            });

            modelBuilder.Entity("NoteManager.Api.Models.File", b =>
            {
                b.HasOne("NoteManager.Api.Models.User", "User")
                    .WithMany()
                    .HasForeignKey("UserId");
            });

            modelBuilder.Entity("NoteManager.Api.Models.Note", b =>
            {
                b.HasOne("NoteManager.Api.Models.User", "User")
                    .WithMany()
                    .HasForeignKey("UserId");
            });

            modelBuilder.Entity("NoteManager.Api.Models.RefreshToken", b =>
            {
                b.HasOne("NoteManager.Api.Models.User", "User")
                    .WithMany()
                    .HasForeignKey("UserId");
            });
#pragma warning restore 612, 618
        }
    }
}